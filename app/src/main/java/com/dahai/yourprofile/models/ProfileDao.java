package com.dahai.yourprofile.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dahai.yourprofile.models.Profile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROFILE.
*/
public class ProfileDao extends AbstractDao<Profile, Long> {

    public static final String TABLENAME = "PROFILE";

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property StartHour = new Property(2, Short.class, "startHour", false, "START_HOUR");
        public final static Property StartMinute = new Property(3, Short.class, "startMinute", false, "START_MINUTE");
        public final static Property StartTotalMinute = new Property(4, Short.class, "startTotalMinute", false, "START_TOTAL_MINUTE");
        public final static Property DaysOfWeek = new Property(5, Integer.class, "daysOfWeek", false, "DAYS_OF_WEEK");
        public final static Property Enabled = new Property(6, Boolean.class, "enabled", false, "ENABLED");
        public final static Property AudioModel = new Property(7, Integer.class, "audioModel", false, "AUDIO_MODEL");
    };


    public ProfileDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROFILE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'START_HOUR' INTEGER," + // 2: startHour
                "'START_MINUTE' INTEGER," + // 3: startMinute
                "'START_TOTAL_MINUTE' INTEGER," + // 4: startTotalMinute
                "'DAYS_OF_WEEK' INTEGER," + // 5: daysOfWeek
                "'ENABLED' INTEGER," + // 6: enabled
                "'AUDIO_MODEL' INTEGER);"); // 7: audioModel
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROFILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        Short startHour = entity.getStartHour();
        if (startHour != null) {
            stmt.bindLong(3, startHour);
        }
 
        Short startMinute = entity.getStartMinute();
        if (startMinute != null) {
            stmt.bindLong(4, startMinute);
        }
 
        Short startTotalMinute = entity.getStartTotalMinute();
        if (startTotalMinute != null) {
            stmt.bindLong(5, startTotalMinute);
        }
 
        Integer daysOfWeek = entity.getDaysOfWeek();
        if (daysOfWeek != null) {
            stmt.bindLong(6, daysOfWeek);
        }
 
        Boolean enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindLong(7, enabled ? 1l: 0l);
        }
 
        Integer audioModel = entity.getAudioModel();
        if (audioModel != null) {
            stmt.bindLong(8, audioModel);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // startHour
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3), // startMinute
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // startTotalMinute
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // daysOfWeek
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // enabled
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // audioModel
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setStartHour(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setStartMinute(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
        entity.setStartTotalMinute(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setDaysOfWeek(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEnabled(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setAudioModel(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Profile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Profile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
